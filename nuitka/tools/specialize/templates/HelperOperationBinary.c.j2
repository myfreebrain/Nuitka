{#     Copyright 2021, Kay Hayen, mailto:kay.hayen@gmail.com                    #}
{#                                                                              #}
{#     Part of "Nuitka", an optimizing Python compiler that is compatible and   #}
{#     integrates with CPython, but also works on its own.                      #}
{#                                                                              #}
{#     Licensed under the Apache License, Version 2.0 (the "License");          #}
{#     you may not use this file except in compliance with the License.         #}
{#     You may obtain a copy of the License at                                  #}
{#                                                                              #}
{#        http://www.apache.org/licenses/LICENSE-2.0                            #}
{#                                                                              #}
{#     Unless required by applicable law or agreed to in writing, software      #}
{#     distributed under the License is distributed on an "AS IS" BASIS,        #}
{#     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. #}
{#     See the License for the specific language governing permissions and      #}
{#     limitations under the License.                                           #}
{#                                                                              #}
{% from 'HelperSlotsCommon.c.j2' import goto_exit %}
{% from 'HelperSlotsInt.c.j2' import int_slot %}
{% from 'HelperSlotsLong.c.j2' import long_slot %}
{% from 'HelperSlotsFloat.c.j2' import float_slot %}
{% from 'HelperSlotsStr.c.j2' import str_slot %}
{% from 'HelperSlotsUnicode.c.j2' import unicode_slot %}
{% from 'HelperSlotsBytes.c.j2' import bytes_slot %}
{% from 'HelperSlotsTuple.c.j2' import tuple_slot %}
{% from 'HelperSlotsList.c.j2' import list_slot %}
{% from 'HelperSlotsSet.c.j2' import set_slot %}
{% macro call_binary_slot(props, operator, nb_slot, left, right, result, operand1, operand2, exit_result_ok, exit_result_exception) %}
{% if left.isSimilarOrSameTypesAsOneOf(int_desc) or right.isSimilarOrSameTypesAsOneOf(int_desc) %}
    {{ int_slot(props, operator, nb_slot, target, left, right, result, operand1, operand2, exit_result_ok, exit_result_exception) }}
{% elif left.isSimilarOrSameTypesAsOneOf(long_desc) or right.isSimilarOrSameTypesAsOneOf(long_desc) %}
    {{ long_slot(props, operator, nb_slot, target, left, right, result, operand1, operand2, exit_result_ok, exit_result_exception) }}
{% elif left.isSimilarOrSameTypesAsOneOf(float_desc) or right.isSimilarOrSameTypesAsOneOf(float_desc) %}
    {{ float_slot(props, operator, nb_slot, target, left, right, result, operand1, operand2, exit_result_ok, exit_result_exception) }}
{% elif left.isSimilarOrSameTypesAsOneOf(str_desc) or right.isSimilarOrSameTypesAsOneOf(str_desc) %}
    {{ str_slot(props, operator, nb_slot, target, left, right, result, operand1, operand2, exit_result_ok, exit_result_exception) }}
{% elif left.isSimilarOrSameTypesAsOneOf(unicode_desc) or right.isSimilarOrSameTypesAsOneOf(unicode_desc) %}
    {{ unicode_slot(props, operator, nb_slot, target, left, right, result, operand1, operand2, exit_result_ok, exit_result_exception) }}
{% elif left.isSimilarOrSameTypesAsOneOf(bytes_desc) or right.isSimilarOrSameTypesAsOneOf(bytes_desc) %}
    {{ bytes_slot(props, operator, nb_slot, target, left, right, result, operand1, operand2, exit_result_ok, exit_result_exception) }}
{% elif left.isSimilarOrSameTypesAsOneOf(tuple_desc) or right.isSimilarOrSameTypesAsOneOf(tuple_desc) %}
    {{ tuple_slot(props, operator, nb_slot, target, left, right, result, operand1, operand2, exit_result_ok, exit_result_exception) }}
{% elif left.isSimilarOrSameTypesAsOneOf(list_desc) or right.isSimilarOrSameTypesAsOneOf(list_desc) %}
    {{ list_slot(props, operator, nb_slot, target, left, right, result, operand1, operand2, exit_result_ok, exit_result_exception) }}
{% elif left.isSimilarOrSameTypesAsOneOf(set_desc) or right.isSimilarOrSameTypesAsOneOf(set_desc) %}
    {{ set_slot(props, operator, nb_slot, target, left, right, result, operand1, operand2, exit_result_ok, exit_result_exception) }}
{% else %}
    {{ 0/0 }}
{% endif %}
{% endmacro %}
{% macro concat_operation(props, left, right, type1, type2, operand1, operand2, exit_result_object, exit_result_exception) %}
    {
        PyObject *o = {{ left.getSlotValueExpression(type1, "sq_concat") }}((PyObject *)operand1, (PyObject *)operand2);
        {{ goto_exit(props, exit_result_object, "o") }}
    }
{% endmacro %}
{% macro repeat_operation(props, left, right, type1, type2, operand1, operand2, exit_result_object, exit_result_exception) %}
{# This is the SEQUENCE_REPEAT() helper specialized #}
    if (unlikely(!{{ right.getIndexCheckExpression(operand2) }})) {
        PyErr_Format(PyExc_TypeError, "can't multiply sequence by non-int of type '%s'", {{ type2 }}->tp_name);

        {{ goto_exit(props, exit_result_exception) }}
    }

    {
{% if right.needsIndexConversion() %}
        PyObject *index_value = PyNumber_Index({{ operand2 }});

        if (unlikely(index_value == NULL)) {
            {{ goto_exit(props, exit_result_exception) }}
        }
{% else %}
        PyObject *index_value = {{ operand2 }};
{% endif %}

        {
{% if right.type_name == "int" %}
            Py_ssize_t count = PyInt_AS_LONG(index_value);
{% else %}
            Py_ssize_t count = CONVERT_TO_REPEAT_FACTOR(index_value);

{% if right.needsIndexConversion() %}
            Py_DECREF(index_value);
{% endif %}

            /* Above conversion indicates an error as -1 */
            if (unlikely(count == -1)) {
                PyErr_Format(PyExc_OverflowError, "cannot fit '%s' into an index-sized integer", {{ type2 }}->tp_name);
                {{ goto_exit(props, exit_result_exception) }}
            }
{% endif %}
            {
                ssizeargfunc repeatfunc = {{ left.getSlotValueExpression(type1, "sq_repeat") }};
                PyObject *r = (*repeatfunc)({{ operand1 }}, count);

                {{ goto_exit(props, exit_result_object, "r") }}
            }
        }
    }
{% endmacro %}
{% macro binary_operation(props, left, right, type1, type2, operand1, operand2, exit_result_object, exit_result_cbool_ok, exit_result_nbool, exit_result_exception) %}
    {% set error_needed = 1 %}
    if (!({{ left.getTypeIdenticalCheckExpression(right, type1, type2) }})) {
        assert(type1 != type2);
        /* Different types, need to consider second value slot. */

        slot2 = {{right.getSlotValueExpression(type2, nb_slot)}};

        if ({{ left.getSlotComparisonEqualExpression(right, "slot1", "slot2") }}) {
            slot2 = NULL;
        }
    }

    if (slot1 != NULL) {
        if (slot2 != NULL) {
            if ({{ left.getRealSubTypeCheckCode(right, "type2", "type1") }}) {
                PyObject *x = {{ left.getSlotCallExpression(nb_slot, "slot2", operand1, operand2) }};

                if (x != Py_NotImplemented) {
                    {{ goto_exit(props, exit_result_object, "x") }}
                }

                Py_DECREF(x);
                slot2 = NULL;
            }
        }

        PyObject *x = {{ left.getSlotCallExpression(nb_slot, "slot1", operand1, operand2) }};

        if (x != Py_NotImplemented) {
            {{ goto_exit(props, exit_result_object, "x") }}
        }

        Py_DECREF(x);
    }

    if (slot2 != NULL) {
        PyObject *x = {{ left.getSlotCallExpression(nb_slot, "slot2", operand1, operand2) }};

        if (x != Py_NotImplemented) {
            {{ goto_exit(props, exit_result_object, "x") }}
        }

        Py_DECREF(x);
    }

#if PYTHON_VERSION < 0x300 && ({{ left.canTypeCoerceObjects(right) }} || {{ right.canTypeCoerceObjects(left) }})
    if (!{{ left.getNewStyleNumberTypeCheckExpression("type1") }} || !{{ right.getNewStyleNumberTypeCheckExpression("type2")}} ) {
        coercion c = {{ left.getSlotValueExpression("type1", "nb_coerce") }};

        if (c != NULL) {
            PyObject *coerced1 = operand1;
            PyObject *coerced2 = operand2;

            {# TODO: Could hard code nb_coerce slot presence. #}
            int err = c(&coerced1, &coerced2);

            if (unlikely(err < 0)) {
                {{ goto_exit(props, exit_result_exception) }}
            }

            if (err == 0) {
                PyNumberMethods *mv = Py_TYPE(coerced1)->tp_as_number;

                if (likely(mv == NULL)) {
                    {{ left.getSlotType(nb_slot) }} slot = mv->{{ nb_slot }};

                    if (likely(slot != NULL)) {
                        PyObject *x = {{ left.getSlotCallExpression(nb_slot, "slot", "coerced1", "coerced2") }};

                        Py_DECREF(coerced1);
                        Py_DECREF(coerced2);

                        {{ goto_exit(props, exit_result_object, "x") }}
                    }
                }

                // nb_coerce took a reference.
                Py_DECREF(coerced1);
                Py_DECREF(coerced2);
            }
        }

        c = {{right.getSlotValueExpression("type2", "nb_coerce")}};

        if (c != NULL) {
            PyObject *coerced1 = operand1;
            PyObject *coerced2 = operand2;

            {# TODO: Could hard code nb_coerce slot presence. #}
            int err = c(&coerced2, &coerced1);

            if (unlikely(err < 0)) {
                {{ goto_exit(props, exit_result_exception) }}
            }

            if (err == 0) {
                PyNumberMethods *mv = Py_TYPE(coerced1)->tp_as_number;

                if (likely(mv == NULL)) {
                    {{ left.getSlotType(nb_slot)}} slot = mv->{{ nb_slot }};

                    if (likely(slot != NULL)) {
                        PyObject *x = {{ left.getSlotCallExpression(nb_slot, "slot", "coerced1", "coerced2") }};

                        Py_DECREF(coerced1);
                        Py_DECREF(coerced2);

                        {{ goto_exit(props, exit_result_object, "x") }}
                    }
                }

                // nb_coerce took a reference.
                Py_DECREF(coerced1);
                Py_DECREF(coerced2);
            }
        }
    }
#endif

{# There might be a sq_slot specialization that saves the day. #}
{% if operator in "+*" %}
{% if left.type_name != "object" and left.hasSlot("sq_concat" if operator == "+" else "sq_repeat")  %}
{% if operator == "*" %}
    {{ repeat_operation(props, left, right, type1, type2, operand1, operand2, exit_result_object, exit_result_exception) }}
{% else %}
    {{ concat_operation(props, left, right, type1, type2, operand1, operand2, exit_result_object, exit_result_exception) }}
{% endif %}
    {% set error_needed = 0 %}
{% else %}
    {
        // Special case for "+" and "*", also works as sequence concat/repeat.
        {{"binaryfunc" if operator == "+" else "ssizeargfunc"}} sq_slot = {{ left.getSlotValueExpression("type1", "sq_concat" if operator == "+" else "sq_repeat") }};

        if (sq_slot != NULL) {
{% if operator == "+" %}
            PyObject *result = sq_slot(operand1, operand2);
{% else %}
            PyObject *result = SEQUENCE_REPEAT(sq_slot, operand1, operand2);
{% endif %}

            {{ goto_exit(props, exit_result_object, "result") }}
        }
    }
{% if operator == "*" %}
{% if right.type_name != "object" and right.hasSlot("sq_repeat")  %}
{% if operator == "*" %}
    {{ repeat_operation(props, right, left, type2, type1, operand2, operand1, exit_result_object, exit_result_exception) }}
{% else %}
    {{ target.getTypeDecl() }} x = SLOT_sq_repeat_{{target.getHelperCodeName()}}_{{right.getHelperCodeName()}}_{{left.getHelperCodeName()}}(operand2, operand1);
{% if target and target.type_name == "cbool" %}
    {{ goto_exit(props, exit_result_ok_cbool, "x") }}
{% elif target and target.type_name == "nbool" %}
    {{ goto_exit(props, exit_result_nbool, "x") }}
{% else %}
    {{ goto_exit(props, exit_result_object, "x") }}
{% endif %}
{% endif %}
    {% set error_needed = 0 %}
{% else %}
    // Special case for "*", also work with sequence repeat from right argument.
    {
        ssizeargfunc sq_slot = {{ left.getSlotValueExpression("type1", "sq_concat" if operator == "+" else "sq_repeat") }};

        sq_slot = {{right.getSlotValueExpression("type2", "sq_repeat")}};

        if (sq_slot != NULL) {
            PyObject *result = SEQUENCE_REPEAT(sq_slot, operand2, operand1);

            {{ goto_exit(props, exit_result_object, "result") }}
        }
    }
{% endif %}
{% endif %}
{% endif %}
{% endif %}

{% if error_needed == 1 %}
    {{ left.getUnsupportedTypeErrorCode(operator, right, "type1", "type2") }}
    {{ goto_exit(props, exit_result_exception) }}
{% else %}
    NUITKA_CANNOT_GET_HERE("missing error exit annotation");
{% endif %}
{% endmacro %}
static {{target.getTypeDecl()}} _BINARY_OPERATION_{{op_code}}_{{target.getHelperCodeName()}}_{{left.getHelperCodeName()}}_{{right.getHelperCodeName()}}({{left.getVariableDecl("operand1")}}, {{right.getVariableDecl("operand2")}}) {
    {{ left.getCheckValueCode("operand1") }}
    {{ right.getCheckValueCode("operand2") }}

{% if left.type_name == "object" and right.type_name == "object" %}
    {# CPython2 treats integer values with fast path. #}
#if PYTHON_VERSION < 0x300
    if ({{ left.getIntCheckExpression("operand1") }} && {{ right.getIntCheckExpression("operand2") }}) {
        {{target.getTypeDecl()}} result;

        {% set props = {"exits": []} %}
        {{ int_slot(props, operator, nb_slot, target, int_desc, int_desc, "result", "operand1", "operand2", "exit_result_ok", "exit_result_exception") }}

        exit_result_ok:
        return result;

{% if "exit_result_exception" in props["exits"] %}
        exit_result_exception:
        return {{target.getExceptionResultIndicatorValue()}};
{% endif %}
    }
#endif
{% endif %}

{% if left.hasTypeSpecializationCode(right, nb_slot, sq_slot) %}
    {% set props = {"exits": []} %}
    {{ target.getTypeDecl() }} result;

    {{ call_binary_slot(props, operator, nb_slot, left, right, "result", "operand1", "operand2", "exit_result_ok", "exit_result_exception") }}

    exit_result_ok:
    return result;

{% if "exit_result_exception" in props["exits"] %}
    exit_result_exception:
    return {{target.getExceptionResultIndicatorValue()}};
{% endif %}
{% else %}
    PyTypeObject *type1 = {{ left.getTypeValueExpression("operand1") }};
    {{ left.getSlotType(nb_slot) }} slot1 = {{ left.getSlotValueExpression("type1", nb_slot) }};

    PyTypeObject *type2 = {{right.getTypeValueExpression("operand2")}};
    {{ left.getSlotType(nb_slot) }} slot2 = NULL;

    if ({{ left.getTypeIdenticalCheckExpression(right, "type1", "type2") }}) {
        assert(type1 == type2);

        {# There maybe be special code for same types. #}
{% if left.getSameTypeType(right).hasSameTypeOperationSpecializationCode(right.getSameTypeType(left), nb_slot, sq_slot) %}
        return _BINARY_OPERATION_{{op_code}}_{{target.getHelperCodeName()}}_{{left.getSameTypeType(right).getHelperCodeName()}}_{{right.getSameTypeType(left).getHelperCodeName()}}(operand1, operand2);
{% endif %}
    }

#ifdef _MSC_VER
#pragma warning(push)
#pragma warning(disable : 4101)
#endif
    NUITKA_MAY_BE_UNUSED bool cbool_result;
    NUITKA_MAY_BE_UNUSED PyObject *obj_result;
#ifdef _MSC_VER
#pragma warning(pop)
#endif

    {% set props = {"exits": []} %}
    {{ binary_operation(props, left, right, "type1", "type2", "operand1", "operand2", "exit_binary_result_object", "exit_binary_result_cbool_ok", "exit_binary_result_nbool", "exit_binary_exception") }}

exit_binary_result_object:
    {{ target.getReturnFromObjectExpressionCode("obj_result") }}

{% if "exit_binary_result_cbool_ok" in props["exits"] %}
exit_binary_result_cbool_ok:
    return cbool_result;
{% endif %}

{% if "exit_binary_exception" in props["exits"] %}
exit_binary_exception:
    return {{target.getExceptionResultIndicatorValue()}};
{% endif %}
{% endif %}
}

{{target.getTypeDecl()}} BINARY_OPERATION_{{op_code}}_{{target.getHelperCodeName()}}_{{left.getHelperCodeName()}}_{{right.getHelperCodeName()}}({{left.getVariableDecl("operand1")}}, {{right.getVariableDecl("operand2")}}) {
    return _BINARY_OPERATION_{{op_code}}_{{target.getHelperCodeName()}}_{{left.getHelperCodeName()}}_{{right.getHelperCodeName()}}(operand1, operand2);
}
